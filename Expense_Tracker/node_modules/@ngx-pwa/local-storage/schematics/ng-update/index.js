"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateToV15 = exports.updateToV13 = exports.updateToV9 = exports.updateToV8 = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const config_1 = require("../utility/config");
const module_1 = require("../utility/module");
function updateToV8() {
    return (host) => __awaiter(this, void 0, void 0, function* () {
        /* Get config */
        const mainPaths = yield (0, config_1.getAllMainPaths)(host);
        /* Update `AppModule` of all projects */
        return (0, schematics_1.chain)(mainPaths.map((mainPath) => (0, module_1.updateModule)(mainPath)));
    });
}
exports.updateToV8 = updateToV8;
function updateToV9() {
    return (host) => __awaiter(this, void 0, void 0, function* () {
        /* Get config */
        const mainPaths = yield (0, config_1.getAllMainPaths)(host);
        /* Update `AppModule` of all projects */
        return (0, schematics_1.chain)(mainPaths.map((mainPath) => (0, module_1.updateModule)(mainPath)));
    });
}
exports.updateToV9 = updateToV9;
function updateToV13() {
    return (host, context) => {
        const rxjsMajorVersion = (0, config_1.getDependencyMajorVersion)("rxjs", host);
        if (!rxjsMajorVersion) {
            context.logger.warn(`Not able to detect rxjs version. Be aware that rxjs version >= 7.4 is recommended for version 13 of this lib.`);
        }
        if (rxjsMajorVersion && (rxjsMajorVersion < 7)) {
            context.logger.warn(`rxjs should be updated to version >= 7.4. Support for rxjs version 6 is not guaranteed.`);
        }
        return host;
    };
}
exports.updateToV13 = updateToV13;
function updateToV15() {
    return (host, context) => {
        const rxjsMajorVersion = (0, config_1.getDependencyMajorVersion)("rxjs", host);
        if (!rxjsMajorVersion) {
            // eslint-disable-next-line max-len
            context.logger.warn(`Not able to detect rxjs version. Be aware that rxjs version >= 7.4 is required for version 15 of this lib, rxjs 6 is not supported.`);
        }
        if (rxjsMajorVersion && (rxjsMajorVersion < 7)) {
            throw new schematics_1.SchematicsException("rxjs >= 7.4 is required for this lib, rxjs 6 is not supported.");
        }
        return host;
    };
}
exports.updateToV15 = updateToV15;
//# sourceMappingURL=index.js.map